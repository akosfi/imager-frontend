on: [pull_request]
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Build, tag, and push image to Docker Hub
        id: build-image
        env:
          DOCKER_HUB_REGISTRY: docker.io
          DOCKER_HUB_REPOSITORY: akosfi/imager-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$DOCKER_HUB_REGISTRY/$DOCKER_HUB_REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: imager-frontend
          image: ${{ steps.build-image.outputs.image }}

      - name: Run this step on master
        if: ${{ github.ref == 'refs/heads/master' }}
        run: echo "Step should run on master"


      - name: Run this step on staging
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: echo "Step should run on staging"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: imager-frontend-dev-service
          cluster: imager
          wait-for-service-stability: true